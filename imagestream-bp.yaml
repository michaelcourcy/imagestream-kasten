kind: Blueprint
apiVersion: cr.kanister.io/v1alpha1
metadata:
  name: imagestream-bp
  namespace: kasten-io
  uid: eeea4fc8-ddb7-4a2d-bd73-c08cd75ceab9
  resourceVersion: "268140343"
  generation: 5
  creationTimestamp: 2021-11-23T08:19:43Z
  managedFields:
    - manager: kubectl-client-side-apply
      operation: Update
      apiVersion: cr.kanister.io/v1alpha1
      time: 2021-11-23T08:19:43Z
      fieldsType: FieldsV1
      fieldsV1:
        f:actions:
          .: {}
          f:backup:
            .: {}
            f:outputArtifacts:
              .: {}
              f:cloudObject:
                .: {}
                f:keyValue:
                  .: {}
                  f:tagdate: {}
                  f:tags: {}
          f:restore:
            .: {}
            f:inputArtifactNames: {}
    - manager: kubectl-replace
      operation: Update
      apiVersion: cr.kanister.io/v1alpha1
      time: 2021-12-03T09:12:42Z
      fieldsType: FieldsV1
      fieldsV1:
        f:actions:
          f:backup:
            f:outputArtifacts:
              f:cloudObject:
                f:keyValue:
                  f:name: {}
    - manager: kubectl-edit
      operation: Update
      apiVersion: cr.kanister.io/v1alpha1
      time: 2022-11-30T15:11:30Z
      fieldsType: FieldsV1
      fieldsV1:
        f:actions:
          f:backup:
            f:phases: {}
          f:restore:
            f:phases: {}
actions:
  backup:
    name: ""
    kind: ""
    outputArtifacts:
      cloudObject:
        keyValue:
          name: "{{ .Phases.initBackup.Output.name }}"
          tagdate: "{{ .Phases.initBackup.Output.tagdate }}"
          tags: "{{ .Phases.initBackup.Output.tags }}"
    phases:
      - func: KubeTask
        name: initBackup
        args:
          command:
            - sh
            - -o
            - errexit
            - -o
            - pipefail
            - -c
            - >
              name="{{ .Object.metadata.name }}"
              kando output name $name
              namespace="{{ .Object.metadata.namespace }}"
              tagdate="{{ toDate "2006-01-02T15:04:05.999999999Z07:00" .Time | date "2006-01-02T15:04:05Z07:00" | toString | replace ":" "-" | lower }}"
              kando output tagdate $tagdate  
              tags="{{range $i, $tag := .Object.status.tags}}{{ index $tag "tag" | toString  }}|{{end}}"
              kando output tags $tags     
              secret=$(kubectl get secret -o name -n $namespace | grep builder-token | tail -1)
              buildertoken=$(kubectl get $secret -n $namespace -o jsonpath='{.data.token}'|base64 -d)
              kando output buildertoken $buildertoken              
              sleep 1
          image: ghcr.io/kanisterio/kanister-kubectl-1.18:0.57.0
          namespace: "{{ .Object.metadata.namespace }}"
      - func: KubeTask
        name: imageBackup
        objects:
          imgmnt:
            apiVersion: ""
            group: ""
            resource: ""
            kind: Secret
            name: image-management
            namespace: "{{ .Object.metadata.namespace }}"
        args:
          command:
            - sh
            - -o
            - errexit
            - -o
            - pipefail
            - -c
            - >
              # the image we want to backup at the date of the backup
              tagdate="{{ .Phases.initBackup.Output.tagdate }}"
              namespace="{{ .Object.metadata.namespace }}"
              image="{{ .Object.metadata.name }}"
              # internal registry and credential
              internalRegistry="{{ index .Phases.imageBackup.Secrets.imgmnt.Data "internalRegistryBackup" | toString }}"
              internalRegistryRepository="$internalRegistry/$namespace/$image"
              internalRegistryUser="serviceaccount"
              internalRegistryPwd="{{ .Phases.initBackup.Output.buildertoken }}"
              # external registry and credential 
              externalRegistry="{{ index .Phases.imageBackup.Secrets.imgmnt.Data "externalRegistry" | toString }}"
              externalRegistryNamespace="{{ index .Phases.imageBackup.Secrets.imgmnt.Data "externalRegistryNamespace" | toString }}"
              externalRegistryRepository="$externalRegistry/$externalRegistryNamespace/$image"
              externalRegistryUser="{{ index .Phases.imageBackup.Secrets.imgmnt.Data "externalRegistryUser" | toString }}"
              externalRegistryPwd="{{ index .Phases.imageBackup.Secrets.imgmnt.Data "externalRegistryPwd" | toString }}"
              {{range $i, $tag := .Object.status.tags}}
              tagname="{{ index $tag "tag" | toString  }}"
              /skopeo copy \
                  --src-creds="$internalRegistryUser:$internalRegistryPwd" \
                  --dest-creds="$externalRegistryUser:$externalRegistryPwd" \
                  --src-tls-verify=false \
                  docker://$internalRegistryRepository:$tagname \
                  docker://$externalRegistryRepository:$tagname-$tagdate
              echo "Successfully backup image $internalRegistryRepository:$tagname to $externalRegistryRepository:$tagname-$tagdate"        
              # sleep 3 to give a chance to output logs            
              sleep 3
              {{end}}            
          image: ananace/skopeo
          namespace: "{{ .Object.metadata.namespace }}"
  restore:
    name: ""
    kind: ""
    inputArtifactNames:
      - cloudObject
    phases:
      - func: KubeTask
        name: initRestore
        args:
          command:
            - sh
            - -o
            - errexit
            - -o
            - pipefail
            - -c
            - >
              namespace="{{ .Object.metadata.namespace }}"
              secret=$(kubectl get secret -o name -n $namespace | grep builder-token | tail -1)
              buildertoken=$(kubectl get $secret -n $namespace -o jsonpath='{.data.token}'|base64 -d)
              kando output buildertoken $buildertoken
          image: ghcr.io/kanisterio/kanister-kubectl-1.18:0.57.0
          namespace: "{{ .Object.metadata.namespace }}"
      - func: KubeTask
        name: imageRestore
        objects:
          imgmnt:
            apiVersion: ""
            group: ""
            resource: ""
            kind: Secret
            name: image-management
            namespace: "{{ .Object.metadata.namespace }}"
        args:
          command:
            - sh
            - -o
            - errexit
            - -o
            - pipefail
            - -c
            - >
              # the tags we want to restore at the date of the backup
              tagdate="{{ .ArtifactsIn.cloudObject.KeyValue.tagdate }}" 
              tags="{{ .ArtifactsIn.cloudObject.KeyValue.tags }}"
              namespace="{{ .Object.metadata.namespace }}"
              image="{{ .Object.metadata.name }}"
              # internal registry and credential
              internalRegistry="{{ index .Phases.imageRestore.Secrets.imgmnt.Data "internalRegistryRestore" | toString }}"
              internalRegistryRepository="$internalRegistry/$namespace/$image"
              internalRegistryUser="serviceaccount"
              internalRegistryPwd="{{ .Phases.initRestore.Output.buildertoken }}"
              # external registry and credential 
              externalRegistry="{{ index .Phases.imageRestore.Secrets.imgmnt.Data "externalRegistry" | toString }}"
              externalRegistryNamespace="{{ index .Phases.imageRestore.Secrets.imgmnt.Data "externalRegistryNamespace" | toString }}"
              externalRegistryRepository="$externalRegistry/$externalRegistryNamespace/$image"
              externalRegistryUser="{{ index .Phases.imageRestore.Secrets.imgmnt.Data "externalRegistryUser" | toString }}"
              externalRegistryPwd="{{ index .Phases.imageRestore.Secrets.imgmnt.Data "externalRegistryPwd" | toString }}"
              for tagname in $(echo $tags | tr "|" "\n")
              do
                /skopeo copy \
                    --src-creds="$externalRegistryUser:$externalRegistryPwd" \
                    --dest-creds="$internalRegistryUser:$internalRegistryPwd" \
                    --dest-tls-verify=false \
                    docker://$externalRegistryRepository:$tagname-$tagdate \
                    docker://$internalRegistryRepository:$tagname
                echo "Successfully restore image $externalRegistryRepository:$tagname-$tagdate to $internalRegistryRepository:$tagname"        
              done
              # sleep 3 to give a chance to output logs"             
              sleep 3     
          image: ananace/skopeo
          namespace: "{{ .Object.metadata.namespace }}"
